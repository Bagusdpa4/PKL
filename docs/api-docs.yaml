openapi: 3.0.1
info:
  title: Final-Project-PKL
  description: API Pemesanan Ticketing Pesawat
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: "Users"
    description: Operations about User
  - name: "Profiles"
    description: Operations about Profile User
paths:
  /users/register:
    post:
      tags:
        - "Users"
      summary: Register user
      description: Register user with the provided information.
      requestBody:
        $ref: "#/components/requestBodies/createUser"

      responses:
        201:
          description: User created was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User Created Successfully
                  data:
                    $ref: "#/components/schemas/UserResponse"

        400:
          description: Input must be required!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Input must be required
                  data:
                    example: ~

        401:
          description: Email already used!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Email already used!
                  data:
                    example: ~

  /users/login:
    post:
      tags:
        - "Users"
      summary: Login user
      description: Login user with the provided information.
      requestBody:
        $ref: "#/components/requestBodies/createLogin"

      responses:
        201:
          description: Login was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login was successfull
                  data:
                    allOf:
                      - $ref: "#/components/schemas/UserResponse"
                      - type: object
                        properties:
                          token:
                            type: integer
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZnVsbG5hbWUiOiJCYWd1cyBEd2kgUHV0cmEgQWRpeW9ubyIsImZhbWlseV9uYW1lIjpudWxsLCJlbWFpbCI6InN1Z2FiLmR3aTg4QGdtYWlsLmNvbSIsInBob25lTnVtYmVyIjoiMDgyMjI5NzQ5NDYyIiwiYXZhdGFyX3VybCI6bnVsbCwiZ29vZ2xlX2lkIjpudWxsLCJvdHAiOiI2NjI1NDMiLCJvdHBDcmVhdGVkQXQiOiIyMDI0LTA1LTI0VDE2OjEzOjU2LjA4OFoiLCJpc1ZlcmlmaWVkIjp0cnVlLCJyb2xlIjoidXNlciIsImlhdCI6MTcxNjU2NzI1OH0._tBfHd_s_J9UWnblX_tHjnTmmt5b2PdXpvekhjHRXF0

        400:
          description: invalid email or password!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: invalid email or password!
                  data:
                    example: ~

        403:
          description: Verify Account User!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Account not verified. Please check your email!
                  data:
                    example: ~

  /users/verify-otp:
    put:
      tags:
        - "Users"
      summary: Verify Otp Email User
      description: Verify Otp Email User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: sugab.dwi88@gmail.com
                otp:
                  type: string
                  example: 123456

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Activation successfully. You're Account is Verified"
                  data:
                    $ref: "#/components/schemas/UserResponse"

        400:
          description: OTP Expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "OTP has expired. Please resend new otp."
                  data:
                    example: ~

        401:
          description: Invalid OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid OTP"
                  data:
                    example: ~

        404:
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "user not found"
                  data:
                    example: ~

  /users/resend-otp:
    put:
      tags:
        - "Users"
      summary: Resend Verify Otp Email User
      description: Resend Verify Otp Email User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: sugab.dwi88@gmail.com

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Resend OTP successfully"
                  data:
                    $ref: "#/components/schemas/UserResponse"

        404:
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "user not found"
                  data:
                    example: ~

  /users/forget-password:
    post:
      tags:
        - "Users"
      summary: Forget Password Email User
      description: Forget Password Email User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: sugab.dwi88@gmail.com

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Success Send Email Forget Password"

        404:
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "user not found"
                  data:
                    example: ~

  /users/reset-password:
    put:
      tags:
        - "Users"
      summary: Reset Password Email User
      parameters:
        - schema:
            type: string
          name: token
          in: query
          description: token for update password
      description: Reset Password Email User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Bagusdpa04#
                passwordConfirmation:
                  type: string
                  example: Bagusdpa04#

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Your password has been updated successfully!"
                  data:
                    $ref: "#/components/schemas/UserResponse"

        400:
          description: Both password and password confirmation are required!!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Both password and password confirmation are required!!"
                  data:
                    example: ~

        401:
          description: Please ensure that the password and password confirmation match!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Please ensure that the password and password confirmation match!"
                  data:
                    example: ~

        403:
          description: Invalid or expired token!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid or expired token!"
                  data:
                    example: ~

  /users/authenticate:
    get:
      tags:
        - "Users"
      summary: Authenticate user
      description: Authenticate user with the token.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    $ref: "#/components/schemas/UserResponse"

        403:
          description: Token not provided!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: token not provided!!
                  data:
                    example: ~

        409:
          description: jwt malformed!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: jwt malformed
                  data:
                    example: ~
      security:
        - bearerAuth: []

  /users/google:
    get:
      tags:
        - Users
      operationId: get-login-user-with-google
      summary: Initiate Google OAuth 2.0 Authentication
      description: Redirects the user to Google for authentication.
      security:
        - google_oauth: []
      responses:
        "302":
          description: Redirect to Google for authentication.

  /users/google/callback:
    get:
      tags:
        - Users
      operationId: get-login-user-with-google-callback
      summary: Google OAuth 2.0 Callback
      description: Handles the callback after successful Google authentication.
      parameters:
        - name: code
          in: query
          required: true
          description: Authorization code received from Google.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: "success"
                  - type: object
                    properties:
                      err:
                        type: string
                        example: null
                      data:
                        type: object
                        properties:
                          user:
                            allOf:
                              - $ref: "#/components/schemas/UserResponse"
                              - type: object
                                properties:
                                  token:
                                    type: integer
                                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZnVsbG5hbWUiOiJCYWd1cyBEd2kgUHV0cmEgQWRpeW9ubyIsImZhbWlseV9uYW1lIjpudWxsLCJlbWFpbCI6InN1Z2FiLmR3aTg4QGdtYWlsLmNvbSIsInBob25lTnVtYmVyIjoiMDgyMjI5NzQ5NDYyIiwiYXZhdGFyX3VybCI6bnVsbCwiZ29vZ2xlX2lkIjpudWxsLCJvdHAiOiI2NjI1NDMiLCJvdHBDcmVhdGVkQXQiOiIyMDI0LTA1LTI0VDE2OjEzOjU2LjA4OFoiLCJpc1ZlcmlmaWVkIjp0cnVlLCJyb2xlIjoidXNlciIsImlhdCI6MTcxNjU2NzI1OH0._tBfHd_s_J9UWnblX_tHjnTmmt5b2PdXpvekhjHRXF0

  /profile:
    get:
      tags:
        - "Profiles"
      summary: Get detail user by id
      description: Get detail user by id

      responses:
        200:
          description: Success get detail user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    $ref: "#/components/schemas/UserResponse"
        404:
          description: user_id not found!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Users not found
                  data:
                    example: ~
      security:
        - bearerAuth: []

    put:
      tags:
        - "Profiles"
      summary: Update user
      description: Edit user by id. Supports updating fullname, phoneNumber, and avatar.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  description: "Full name of the user"
                  example: "RevaFidelaAdelPantjoro"
                phoneNumber:
                  type: string
                  description: "Phone number of the user"
                  example: "08947583901"
                avatar_url:
                  type: string
                  format: binary
                  description: "Avatar image file max 2MB"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Update Data Successfully"
                  data:
                    $ref: "#/components/schemas/UserResponse"
        400:
          description: Input must be provided!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "At least one field must be updated"
                  data:
                    example: ~
        404:
          description: user_id not found!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found"
                  data:
                    example: ~
      security:
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    google_oauth:
      type: oauth2
      description: Google OAuth
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://www.googleapis.com/oauth2/v4/token
          scopes:
            profile: View your basic profile info
            email: View your email address
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        fullname:
          type: string
          example: PKL
        family_name:
          type: string
          example: ~
        email:
          type: string
          example: sugab.dwi88@gmail.com
        phoneNumber:
          type: string
          example: "08123456789"
        avatar_url:
          type: string
          example: ~
        google_id:
          type: string
          example: ~
        otp:
          type: string
          example: 123456
        otpCreatedAt:
          type: string
          example: 2024-06-30T16:03:46.444Z
        isVerified:
          type: boolean
          example: false
        role:
          type: string
          example: user

  requestBodies:
    createLogin:
      content:
        application/json:
          schema:
            type: object
            properties:
              emailOrPhoneNumber:
                type: string
                example: sugab.dwi88@gmail.com
              password:
                type: string
                example: Bagusdpa4#
    createUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              fullname:
                type: string
                example: PKL
              email:
                type: string
                example: sugab.dwi88@gmail.com
              phoneNumber:
                type: string
                example: "08123456789"
              password:
                type: string
                example: Bagusdpa4#